# ────────────────────────────────────────────────────────────────────────────────
#  GLOBAL SERVER & SSL (reload-on-update)                                         
# ────────────────────────────────────────────────────────────────────────────────
server:
  port: ${SKUTTER_HTTPS_PORT:8445}           # single HTTPS port
  servlet:
    context-path: ${SERVER_SERVLET_CONTEXT_PATH:/skutter-project-service/1.0}

  http2:
    enabled: true

  compression:
    enabled: true
    mime-types: application/json,application/xml,text/html,text/plain,application/javascript,text/css
    min-response-size: 4096
  forward-headers-strategy: native

  # Tell Tomcat / Netty to use the bundle declared below
  ssl:
    bundle: skutter-ssl
    enabled-protocols: TLSv1.3,TLSv1.2
    ciphers: >
      TLS_AES_256_GCM_SHA384,
      TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384

# ────────────────────────────────────────────────────────────────────────────────
#  SPRING BOOT                                                                   
# ────────────────────────────────────────────────────────────────────────────────
spring:
  application:
    name: ${SPRING_APPLICATION_NAME:skutter-project-service}

  main:
    allow-bean-definition-overriding: true

  # ── Jackson ────────────────────────────────────────────────────
  jackson:
    property-naming-strategy: SNAKE_CASE
    date-format: yyyy-MM-dd'T'HH:mm:ss.SSSXXX
    serialization:
      write-dates-as-timestamps: false
    deserialization:
      fail-on-unknown-properties: false

  # ── **Hot-reloadable** SSL bundle (PEM example) ───────────────
  ssl:
    bundle:
      pem:
        skutter-ssl:                           # ← the name referenced by server.ssl.bundle
          reload-on-update: true               # hot-reload switch
          watch:
            file:
              quiet-period: 10s                     # debounce (default 10 s)
          keystore:
            certificate: ${SKUTTER_TLS_CERT:file:${SKUTTER_HOME:/opt/skutter.ai}/etc/certs/server.crt}
            private-key:  ${SKUTTER_TLS_KEY:file:${SKUTTER_HOME:/opt/skutter.ai}/etc/certs/server.key}

  # ── DataSource ────────────────────────────────────────────────
  datasource:
    url: ${SPRING_DATASOURCE_URL:jdbc:postgresql://localhost:5432/postgres?sslmode=prefer}
    username: ${SPRING_DATASOURCE_USERNAME:postgres}
    password: ${SPRING_DATASOURCE_PASSWORD:your-super-secret-and-long-postgres-password}
    driver-class-name: org.postgresql.Driver
    hikari:
      keepalive-time: ${SPRING_DATASOURCE_HIKARI_KEEPALIVE_TIME:240000}
      maximum-pool-size: ${SPRING_DATASOURCE_HIKARI_MAXIMUM_POOL_SIZE:10}
      minimum-idle: ${SPRING_DATASOURCE_HIKARI_MINIMUM_IDLE:5}
      connection-timeout: ${SPRING_DATASOURCE_HIKARI_CONNECTION_TIMEOUT:30000}
      idle-timeout: ${SPRING_DATASOURCE_HIKARI_IDLE_TIMEOUT:600000}
      max-lifetime: ${SPRING_DATASOURCE_HIKARI_MAX_LIFETIME:1740000}
      validation-timeout: ${SPRING_DATASOURCE_HIKARI_VALIDATION_TIMEOUT:5000}

  # ── Flyway ────────────────────────────────────────────────────
  flyway:
    enabled: true
    connect-retries: 4
    default-schema: skutter
    schemas: skutter
    create-schemas: true
    baseline-on-migrate: true
    locations: classpath:db/migration
    placeholders:
      timezone: UTC

  # ── JPA / Hibernate ───────────────────────────────────────────
  jpa:
    hibernate:
      ddl-auto: ${SPRING_JPA_HIBERNATE_DDL_AUTO:validate}
    properties:
      hibernate:
        default_schema: skutter
        dialect: org.hibernate.dialect.PostgreSQLDialect
        format_sql: ${SPRING_JPA_FORMAT_SQL:false}
        jdbc:
          lob.non_contextual_creation: true
    show-sql: ${SPRING_JPA_SHOW_SQL:false}

# ────────────────────────────────────────────────────────────────────────────────
#  SKUTTER FRAMEWORK                                                            
# ────────────────────────────────────────────────────────────────────────────────
skutter:
  security:
    enabled: ${SKUTTER_SECURITY_ENABLED:true}

    # ── HTTPS Settings – disabled as server.ssl.bundle is used ──
    https:
      enabled: false # Keep this to disable SkutterTlsConfiguration
      # Optional: Keep port/hsts if referenced directly by custom code, otherwise remove
      port: ${SKUTTER_HTTPS_PORT:8445} 
      hsts-enabled: ${SKUTTER_HTTPS_HSTS_ENABLED:true}
      hsts-max-age-seconds: ${SKUTTER_HTTPS_HSTS_MAX_AGE_SECONDS:31536000}
      hsts-include-sub-domains: ${SKUTTER_HTTPS_HSTS_INCLUDE_SUB_DOMAINS:true}
      hsts-preload: ${SKUTTER_HTTPS_HSTS_PRELOAD:false}
      # Removed keystore-path, keystore-password, keystore-type, keystore-alias as they are unused when enabled=false

    # ── JWT ───────────────────────────────────────────────────
    jwt:
      secret: ${JWT_SECRET}                     # supply at runtime
      issuer: ${JWT_ISSUER_URL:https://api.supabase.co/auth/v1}
      validate-expiration: ${JWT_VALIDATE_EXPIRATION:true}
      validate-issuer: ${JWT_VALIDATE_ISSUER:true}
      role-claim: ${JWT_ROLE_CLAIM:app_metadata.skutter_role}
      user-id-claim: ${JWT_USER_ID_CLAIM:sub}
      set-postgres-user-id: ${JWT_SET_POSTGRES_USER_ID:true}

    public-paths:
      - /actuator/health/**
      - /actuator/info
      - /v3/api-docs/**
      - /swagger-ui/**
      - /swagger-ui.html
      - /health
      - /public/**

    cors:
      enabled: ${SKUTTER_CORS_ENABLED:true}
      allowed-origins:
        - ${SKUTTER_CORS_ALLOWED_ORIGINS:http://localhost:3000}
      allowed-methods: ${SKUTTER_CORS_ALLOWED_METHODS:GET,POST,PUT,PATCH,DELETE,OPTIONS}
      allowed-headers: ${SKUTTER_CORS_ALLOWED_HEADERS:Authorization,Content-Type,Accept,X-Requested-With,X-Correlation-ID}
      allow-credentials: ${SKUTTER_CORS_ALLOW_CREDENTIALS:true}
      max-age: ${SKUTTER_CORS_MAX_AGE:3600}

  api:
    rate-limit:
      enabled: ${SKUTTER_API_RATE_LIMIT_ENABLED:true}
      limit: ${SKUTTER_API_RATE_LIMIT_LIMIT:60}
      refresh-period: ${SKUTTER_API_RATE_LIMIT_REFRESH_PERIOD:60s}

    documentation:
      enabled: true
      title: Skutter Project Service API
      version: 1.0
      description: API for managing projects and user assignments in the Skutter platform
      contact-name: Skutter Development Team
      contact-email: dev@skutter.ai
      contact-url: https://skutter.ai
      license-name: Copyright Skutter.ai

  data:
    enable-user-id-propagation: ${SKUTTER_DATA_ENABLE_USER_ID_PROPAGATION:true}

  observability:
    correlation:
      header-name: ${SKUTTER_CORRELATION_HEADER_NAME:X-Correlation-ID}
      generate-if-missing: ${SKUTTER_CORRELATION_GENERATE_IF_MISSING:true}
      propagate-to-downstream: ${SKUTTER_CORRELATION_PROPAGATE_TO_DOWNSTREAM:true}
    logging:
      level: INFO
      include-correlation-id: true
      include-user-id: true
      include-request-details: true

# ────────────────────────────────────────────────────────────────────────────────
#  ACTUATOR / METRICS                                                           
# ────────────────────────────────────────────────────────────────────────────────
management:
  endpoints:
    web:
      base-path: ${MANAGEMENT_ENDPOINTS_WEB_BASE_PATH:/actuator}
      exposure:
        include: ${MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE:health,info}
  endpoint:
    health:
      show-details: ${MANAGEMENT_ENDPOINT_HEALTH_SHOW_DETAILS:when_authorized}
  metrics:
    export:
      prometheus:
        enabled: ${MANAGEMENT_METRICS_EXPORT_PROMETHEUS_ENABLED:true}

# ────────────────────────────────────────────────────────────────────────────────
#  LOGGING                                                                      
# ────────────────────────────────────────────────────────────────────────────────
logging:
  file:
    name: ${LOGGING_FILE_NAME:${SKUTTER_HOME:/opt/skutter.ai}/logs/skutter-project-service.log}
  logback:
    rollingpolicy:
      file-name-pattern: ${logging.file.name}.%d{yyyy-MM-dd}.%i.log.gz
      max-file-size: ${LOGGING_LOGBACK_ROLLINGPOLICY_MAX_FILE_SIZE:10MB}
      max-history: ${LOGGING_LOGBACK_ROLLINGPOLICY_MAX_HISTORY:30}
      total-size-cap: ${LOGGING_LOGBACK_ROLLINGPOLICY_TOTAL_SIZE_CAP:3GB}
      clean-history-on-start: false
  pattern:
    console: "%clr(%d{yyyy-MM-dd HH:mm:ss.SSS}){faint} %clr(${LOG_LEVEL_PATTERN:-%5p}) %clr(${PID:- }){magenta} %clr(---){faint} %clr([%15.15t]){faint} %clr(%-40.40logger{39}){cyan} %clr(:){faint} [%X{correlationId:-}] %m%n${LOG_EXCEPTION_CONVERSION_WORD:-%wEx}"
    file: "%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{36} - [%X{correlationId:-}] - %msg%n${LOG_EXCEPTION_CONVERSION_WORD:-%wEx}"
  level:
    root: INFO
    ai.skutter: TRACE
    org.hibernate.SQL: ${LOGGING_LEVEL_ORG_HIBERNATE_SQL:INFO}
    org.hibernate.type.descriptor.sql: ${LOGGING_LEVEL_ORG_HIBERNATE_TYPE:INFO}
    org.apache.coyote: WARN
    org.springframework: ${LOGGING_LEVEL_ORG_SPRINGFRAMEWORK:INFO}
    org.springframework.web: ${LOGGING_LEVEL_ORG_SPRINGFRAMEWORK_WEB:INFO}
    org.springframework.security: ${LOGGING_LEVEL_ORG_SPRINGFRAMEWORK_SECURITY:INFO}

# ────────────────────────────────────────────────────────────────────────────────
#  RESILIENCE4J (unchanged)                                                     
# ────────────────────────────────────────────────────────────────────────────────
resilience4j:
  circuitbreaker:
    circuitBreakerAspectOrder: 1
    configs:
      default:
        registerHealthIndicator: true
        slidingWindowType: COUNT_BASED
        slidingWindowSize: 50
        minimumNumberOfCalls: 10
        slowCallDurationThreshold: 2s
        slowCallRateThreshold: 60
        failureRateThreshold: 50
        waitDurationInOpenState: 30s
        permittedNumberOfCallsInHalfOpenState: 5
        automaticTransitionFromOpenToHalfOpenEnabled: true
        eventConsumerBufferSize: 50
    instances:
      databaseService:
        baseConfig: default
        failureRateThreshold: 30
        waitDurationInOpenState: 20s
        recordExceptions:
          - org.springframework.dao.RecoverableDataAccessException
          - org.springframework.transaction.CannotCreateTransactionException
          - com.zaxxer.hikari.pool.HikariPool$PoolInitializationException
          - java.net.ConnectException
          - java.net.SocketTimeoutException
          - org.postgresql.util.PSQLException
          - org.springframework.dao.QueryTimeoutException
        ignoreExceptions:
          - org.springframework.dao.DataIntegrityViolationException
          - org.springframework.dao.EmptyResultDataAccessException
          - io.github.resilience4j.ratelimiter.RequestNotPermitted
      authService:
        baseConfig: default
        slidingWindowSize: 30
        waitDurationInOpenState: 15s
        recordExceptions:
          - java.net.ConnectException
          - java.net.SocketTimeoutException
        ignoreExceptions:
          - org.springframework.security.oauth2.jwt.JwtException
          - org.springframework.security.access.AccessDeniedException
          - io.github.resilience4j.ratelimiter.RequestNotPermitted

  ratelimiter:
    rateLimiterAspectOrder: 0
    configs:
      default:
        registerHealthIndicator: true
        limitRefreshPeriod: 1s
        timeoutDuration: 0
        eventConsumerBufferSize: 100
    instances:
      dbReadOperations:
        baseConfig: default
        limitForPeriod: 80
        timeoutDuration: 300ms
      dbWriteOperations:
        baseConfig: default
        limitForPeriod: 80
        timeoutDuration: 300ms
      externalApiCalls:
        baseConfig: default
        limitForPeriod: 30
        timeoutDuration: 2s

  retry:
    retryAspectOrder: 2
    configs:
      default: { maxRetryAttempts: 3, waitDuration: 1s }
    instances:
      databaseService:
        baseConfig: default
      authService:
        baseConfig: default
        maxRetryAttempts: 2

  bulkhead:
    bulkheadAspectOrder: 3
    instances:
      databaseService:
        maxConcurrentCalls: 20